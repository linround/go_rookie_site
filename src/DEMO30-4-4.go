package main

import "fmt"

// 程序中所用到的内存在计算机中使用"字"来表示
// 所有的字都具有32位（4字节）或64位（8字节）的相同长度
// 所有的字都使用相关的内存地址表示

// 例如int 这种基本类型 属于值类型，使用这些类型的变量直接指向 存在内存中的值
// 即 值类型 指向 值
// 值类型的变量的值 存储在栈中
//
// 复杂的数据通常使用引用类型保存。
// 一个引用类型的变量r1存储的r1的值所在的内存地址，或内存地址中第一个字所在位置。
// 这个内存地址被称之为指针 这个指针实际也被存在另外某一个字中
// 当使用赋值语句r2=r1 时，只有引用（地址）被复制
// 在go语言中指针属于引用类型，以及slices,maps，channel;
// 被引用的变量存储在堆中，以便进行垃圾回收，且比栈具有更大的内存空间

// ”=“是将一个变量的值赋值给另一个变量
// j = i实际上是在内存中将i的值进行了拷贝

func main() {
	a, b := 1, 52
	a, b = b, a
	_, d := a, b
	fmt.Println(d)
}

// init函数一个可能的作用是在开始执行程序之前对数据进行校验或修复
// 从而保证程序状态的正确性
func init() {

}
